import unittest

from number_converter import NumberConverter



class TestStringMethods(unittest.TestCase):
    test_numbers = (
        2, 10, 12, 29, 136, 561, 1254, 7429, 895_702,
        1_895_702, 671_895_702, 5_671_895_702, 237_521_671_895_702,
        934_237_521_671_895_702, 368_934_000_521_671_000_702,
        111_368_934_000_521_671_000_702, 812_111_368_934_000_521_671_000_702,
        333_812_111_368_934_000_521_671_000_702, 498_333_812_111_368_934_000_521_671_000_702
    )
    ru_str = (
        'два', 'десять', 'двенадцать', 'двадцать девять', 'сто тридцать шесть',
        'пятьсот шестьдесят один', 'одна тысяча двести пятьдесят четыре',
        'семь тысяч четыреста двадцать девять', 'восемьсот девяносто пять тысяч семьсот два',
        'один миллион восемьсот девяносто пять тысяч семьсот два',
        'шестьсот семьдесят один миллион восемьсот девяносто пять тысяч семьсот два',
        'пять миллиардов шестьсот семьдесят один миллион восемьсот девяносто пять тысяч семьсот два',
        'двести тридцать семь триллионов пятьсот двадцать один миллиард шестьсот семьдесят один миллион восемьсот девяносто пять тысяч семьсот два',
        'девятьсот тридцать четыре квадриллиона двести тридцать семь триллионов пятьсот двадцать один миллиард шестьсот семьдесят один миллион восемьсот девяносто пять тысяч семьсот два',
        'триста шестьдесят восемь квинтиллионов девятьсот тридцать четыре квадриллиона пятьсот двадцать один миллиард шестьсот семьдесят один миллион семьсот два',
        'сто одиннадцать секстиллионов триста шестьдесят восемь квинтиллионов девятьсот тридцать четыре квадриллиона пятьсот двадцать один миллиард шестьсот семьдесят один миллион семьсот два',
        'восемьсот двенадцать септиллионов сто одиннадцать секстиллионов триста шестьдесят восемь квинтиллионов девятьсот тридцать четыре квадриллиона пятьсот двадцать один миллиард шестьсот семьдесят один миллион семьсот два',
        'триста тридцать три октиллиона восемьсот двенадцать септиллионов сто одиннадцать секстиллионов триста шестьдесят восемь квинтиллионов девятьсот тридцать четыре квадриллиона пятьсот двадцать один миллиард шестьсот семьдесят один миллион семьсот два',
        'четыреста девяносто восемь нониллионов триста тридцать три октиллиона восемьсот двенадцать септиллионов сто одиннадцать секстиллионов триста шестьдесят восемь квинтиллионов девятьсот тридцать четыре квадриллиона пятьсот двадцать один миллиард шестьсот семьдесят один миллион семьсот два'
    )
    ua_str = (
        'два', 'десять', 'дванадцять', "двадцять дев'ять", 'сто тридцять шість',
        "п'ятсот шістдесят один", "одна тисяча двісті п'ятдесят чотири",
        "сім тисяч чотириста двадцять дев'ять", "вісімсот дев'яносто п'ять тисяч сімсот два",
        "один мільйон вісімсот дев'яносто п'ять тисяч сімсот два",
        "шістсот сімдесят один мільйон вісімсот дев'яносто п'ять тисяч сімсот два",
        "п'ять мільярдів шістсот сімдесят один мільйон вісімсот дев'яносто п'ять тисяч сімсот два",
        "двісті тридцять сім трильйонів п'ятсот двадцять один мільярд шістсот сімдесят один мільйон вісімсот дев'яносто п'ять тисяч сімсот два",
        "дев'ятсот тридцять чотири квадрильйона двісті тридцять сім трильйонів п'ятсот двадцять один мільярд шістсот сімдесят один мільйон вісімсот дев'яносто п'ять тисяч сімсот два",
        "триста шістдесят вісім квінтильйонів дев'ятсот тридцять чотири квадрильйона п'ятсот двадцять один мільярд шістсот сімдесят один мільйон сімсот два",
        "сто одинадцять секстильйонів триста шістдесят вісім квінтильйонів дев'ятсот тридцять чотири квадрильйона п'ятсот двадцять один мільярд шістсот сімдесят один мільйон сімсот два",
        "вісімсот дванадцять септильйонів сто одинадцять секстильйонів триста шістдесят вісім квінтильйонів дев'ятсот тридцять чотири квадрильйона п'ятсот двадцять один мільярд шістсот сімдесят один мільйон сімсот два",
        "триста тридцять три октильйона вісімсот дванадцять септильйонів сто одинадцять секстильйонів триста шістдесят вісім квінтильйонів дев'ятсот тридцять чотири квадрильйона п'ятсот двадцять один мільярд шістсот сімдесят один мільйон сімсот два",
        "чотириста дев'яносто вісім нонільйонів триста тридцять три октильйона вісімсот дванадцять септильйонів сто одинадцять секстильйонів триста шістдесят вісім квінтильйонів дев'ятсот тридцять чотири квадрильйона п'ятсот двадцять один мільярд шістсот сімдесят один мільйон сімсот два"
    )

    def test_convert_number_ru(self):
        converter = NumberConverter()
        for idx, num in enumerate(self.test_numbers):
            str_repr = converter.convert(num)
            self.assertEqual(self.ru_str[idx], str_repr)

    def test_convert_number_ua(self):
        converter = NumberConverter("UA")
        for idx, num in enumerate(self.test_numbers):
            str_repr = converter.convert(num)
            self.assertEqual(self.ua_str[idx], str_repr)
    
    def test_unsupported_language(self):
        try:
            NumberConverter("EN")
        except TypeError as exc:
            self.assertEqual("The language is not supported: EN", str(exc))
    
    def test_large_number(self):
        converter = NumberConverter()
        number = 345_758_678_111_346_678_982_345_096_567_372_111_678_983_467_987
        try:
            converter.convert(number)
        except ValueError as exc:
            self.assertEqual(f"The number {number} is too big", str(exc))
    
    def test_incorrect_number(self):
        converter = NumberConverter()
        number = "ecneknc"
        try:
            converter.convert(number)
        except ValueError as exc:
            self.assertEqual("The ecneknc is not number", str(exc))


if __name__ == '__main__':
    unittest.main()
